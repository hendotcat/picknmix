/*
name: column
layout: mixin
description: Accessible single-column responsive layout
dependencies:
  - margin
  - width
examples:
  - name: responsive square
    description: Using --column as the width and height
    html: |
      <div></div>
    scss: |
      :root {
        @include picknmix.column;
        @include picknmix.margin;
        @include picknmix.width;
      }

      main {
        display: grid;
        place-content: center;
      }

      div {
        background-color: var(--orange);
        height: var(--column);
        width: var(--column);
      }

notes:
  - title: About
    text: |
      This single-column responsive layout mixin supports viewport widths as
      narrow as 128px. For widths below 256px it applies no margin in order to
      conserve space for content. A 16px margin is applied to wider viewports
      to create some breathing room around content. At 512px, the width maxes
      out and stops growing.

  - title: Behavior
    text: |
      The following graph shows the growth of the column width (in purple) and
      the [margin] (in blue) for viewport widths from 128px to 1024px.

      <img src="/plots/column.svg" />

      The growth rate of the column briefly doubles as the viewport width
      approaches 512px. This coincides with the shrink phase of the [margin],
      which disappears as the viewport width exceeds the maximum column width.

      The plateau in the growth of the column width coincides with the growth
      phase of the [margin]. This allows the [margin] to grow without the
      combined width of both values exceeding the viewport width. The following
      video illustrates the effect of this growth pause.

      <video
        autoplay
        controls
        loop
        src="/videos/column-margin-pause.mp4"
        aria-label="The Google Chrome dev tools with a page containing a cyan box. As the page is widened, the box grows with it. Around 256px of width, the box briefly stops growing with the page width as a margin appears around it."
      />
      [margin]: /margin

  - title: Accessibility
    text: |
      The column width is implemented with relative units rather than an
      absolute value such as pixels. This causes the width to scale up for
      users who resize the text. On desktop-size viewports this is important
      because otherwise the resized text would still have only 512px of width
      to fit inside, and lines would get shorter and shorter as the text size
      increased.

      WCAG 2.0 success criterion 1.4.4 requires authors to support a zoom level
      of up to 200% without loss of content or functionality.

      <blockquote>
        <p>
          <strong>Resize text</strong>: Except for captions and images of text,
          text can be resized without assistive technology up to 200 percent
          without loss of content or functionality. (Level AA)
        </p>
        <footer>
          <cite>
            <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-scale.html">
              WCAG 2.0 SC 1.4.4
            </a>
          </cite>
        </footer>
      </blockquote>

      This mixin handles zoom levels far beyond 200%. On larger desktop-size
      viewports, higher zoom levels revert the layout further and further
      towards the mobile layout with the text filling the full width of the
      viewport. On smaller mobile viewports, maxing out the zoom engages the
      zero margin tiny viewport layout in order to maximize the space available
      for displaying zoomed-in content.

      <video
        autoplay
        controls
        loop
        src="/videos/column-mobile-zoom.mp4"
        aria-label="Mobile Safari with the text size controls enabled and a cyan box on the page. As the text size increases, the box grows. Eventually the margin around the box disappears and it occupies the full width of the page."
      />


*/

@mixin column {
  --column: min(
    calc(
      var(--width)
      - var(--margin)
      * 2
    ),
    min(32rem, 100vw)
  );
}

